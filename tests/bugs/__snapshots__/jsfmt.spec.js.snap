// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bugs.swift 1`] = `
#!/usr/bin/swift
button.addTarget(self, action: #selector(pressed(_:)), for: .touchUpInside)

print(optional ?? [])

let x = PublishSubject<Date>()

NSNumber.self

class Spinner: UIView {
    let rotationDuration = 0.9;
}

protocol Something {
    associatedtype T1
    associatedtype T2: Foo, Bar
}

[1, 2, 3].map { (partial) -> String in
    "\\(partial)"
}

let firstTupleElement = tuple.0

let semicolons = foo();

[1,2,3].map { $0 + 1 }

let foo = { bar(); baz() }

let sub = { (\`self\`) -> Disposable in self.subscribe() }

@available(iOS 8, OSX 10.10, *)
func foo(x: Int) -> String {

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/usr/bin/swift
button.addTarget(self, action: #selector(pressed(_:)), for: .touchUpInside)

print(optional ?? [])

let x = PublishSubject<Date>()

NSNumber.self

class Spinner: UIView {
    let rotationDuration = 0.9
}

protocol Something {
    associatedtype T1
    associatedtype T2: Foo, Bar
}

[1, 2, 3].map { partial -> String in
    "\\(partial)"
}

let firstTupleElement = tuple.0

let semicolons = foo();

[1, 2, 3].map { $0 + 1 }

let foo = {
    bar();
    baz()
}

let sub = { \`self\` -> Disposable in
    self.subscribe()
}

@available(iOS 8, OSX 10.10, *)
func foo(x: Int) -> String { }

`;

exports[`closure_with_parens.swift 1`] = `
let foo = { (_, user: User) in print(user) }

// This will not be formatted because the above line prevents us
// from processing this whole file.
let array = [1,2,3]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

let foo = { (_, user: User) in print(user) }

// This will not be formatted because the above line prevents us
// from processing this whole file.
let array = [1,2,3]

`;
